import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Choice = {
  __typename?: 'Choice';
  description?: Maybe<Scalars['String']>;
  evaluation: Scalars['Int'];
  id: Scalars['Int'];
  name: Scalars['String'];
  themeId: Scalars['Int'];
  url?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateChoice */
export type CreateChoiceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  evaluation?: InputMaybe<Scalars['Int']>;
  name: Scalars['String'];
  themeId: Scalars['Int'];
  url?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of CreateChoice */
export type CreateChoicePayload = {
  __typename?: 'CreateChoicePayload';
  choice: Choice;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateTag */
export type CreateTagInput = {
  choiceId: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Autogenerated return type of CreateTag */
export type CreateTagPayload = {
  __typename?: 'CreateTagPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of CreateTheme */
export type CreateThemeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Autogenerated return type of CreateTheme */
export type CreateThemePayload = {
  __typename?: 'CreateThemePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** Autogenerated input type of DeleteTag */
export type DeleteTagInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** Autogenerated return type of DeleteTag */
export type DeleteTagPayload = {
  __typename?: 'DeleteTagPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of DeleteTheme */
export type DeleteThemeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** Autogenerated return type of DeleteTheme */
export type DeleteThemePayload = {
  __typename?: 'DeleteThemePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  addChoice?: Maybe<CreateChoicePayload>;
  addTheme?: Maybe<CreateThemePayload>;
  createTag?: Maybe<CreateTagPayload>;
  deleteTag?: Maybe<DeleteTagPayload>;
  removeTheme?: Maybe<DeleteThemePayload>;
  updateChoice?: Maybe<UpdateChoicePayload>;
  updateTheme?: Maybe<UpdateThemePayload>;
};

export type MutationAddChoiceArgs = {
  input: CreateChoiceInput;
};

export type MutationAddThemeArgs = {
  input: CreateThemeInput;
};

export type MutationCreateTagArgs = {
  input: CreateTagInput;
};

export type MutationDeleteTagArgs = {
  input: DeleteTagInput;
};

export type MutationRemoveThemeArgs = {
  input: DeleteThemeInput;
};

export type MutationUpdateChoiceArgs = {
  input: UpdateChoiceInput;
};

export type MutationUpdateThemeArgs = {
  input: UpdateThemeInput;
};

export type Profile = {
  __typename?: 'Profile';
  dispName: Scalars['String'];
  email: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  ekz?: Maybe<Choice>;
  profile: Profile;
  tags: Array<Tag>;
  theme?: Maybe<Theme>;
  themes: Array<Theme>;
};

export type QueryEkzArgs = {
  prePickedChoiceId?: InputMaybe<Scalars['Int']>;
  themeId: Scalars['Int'];
};

export type QueryTagsArgs = {
  choiceId: Scalars['Int'];
};

export type QueryThemeArgs = {
  themeId: Scalars['Int'];
};

export type Tag = {
  __typename?: 'Tag';
  choiceId: Scalars['Int'];
  id: Scalars['Int'];
  name: Scalars['String'];
};

export type Theme = {
  __typename?: 'Theme';
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
};

/** Autogenerated input type of UpdateChoice */
export type UpdateChoiceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  evaluation?: InputMaybe<Scalars['Int']>;
  id: Scalars['Int'];
  name: Scalars['String'];
  url?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateChoice */
export type UpdateChoicePayload = {
  __typename?: 'UpdateChoicePayload';
  choice: Choice;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateTheme */
export type UpdateThemeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  id: Scalars['Int'];
  name: Scalars['String'];
};

/** Autogenerated return type of UpdateTheme */
export type UpdateThemePayload = {
  __typename?: 'UpdateThemePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

export type AddChoiceMutationVariables = Exact<{
  name: Scalars['String'];
  url?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  evaluation?: InputMaybe<Scalars['Int']>;
  themeId: Scalars['Int'];
}>;

export type AddChoiceMutation = {
  __typename?: 'Mutation';
  addChoice?: {
    __typename?: 'CreateChoicePayload';
    choice: {
      __typename?: 'Choice';
      id: number;
      name: string;
      url?: string | null;
      description?: string | null;
      evaluation: number;
      themeId: number;
    };
  } | null;
};

export type UpdateChoiceMutationVariables = Exact<{
  id: Scalars['Int'];
  name: Scalars['String'];
  url?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  evaluation?: InputMaybe<Scalars['Int']>;
}>;

export type UpdateChoiceMutation = {
  __typename?: 'Mutation';
  updateChoice?: {
    __typename?: 'UpdateChoicePayload';
    choice: {
      __typename?: 'Choice';
      id: number;
      name: string;
      url?: string | null;
      description?: string | null;
      evaluation: number;
      themeId: number;
    };
  } | null;
};

export type PickEkzQueryVariables = Exact<{
  themeId: Scalars['Int'];
  prePickedChoiceId?: InputMaybe<Scalars['Int']>;
}>;

export type PickEkzQuery = {
  __typename?: 'Query';
  ekz?: {
    __typename?: 'Choice';
    id: number;
    name: string;
    url?: string | null;
    description?: string | null;
    evaluation: number;
    themeId: number;
  } | null;
};

export type ChoiceFragment = {
  __typename?: 'Choice';
  id: number;
  name: string;
  url?: string | null;
  description?: string | null;
  evaluation: number;
  themeId: number;
};

export type AddThemeMutationVariables = Exact<{
  name: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
}>;

export type AddThemeMutation = {
  __typename?: 'Mutation';
  addTheme?: { __typename?: 'CreateThemePayload'; id: number } | null;
};

export type RemoveThemeMutationVariables = Exact<{
  id: Scalars['Int'];
}>;

export type RemoveThemeMutation = {
  __typename?: 'Mutation';
  removeTheme?: { __typename?: 'DeleteThemePayload'; id: number } | null;
};

export type UpdateThemeMutationVariables = Exact<{
  id: Scalars['Int'];
  name: Scalars['String'];
  description?: InputMaybe<Scalars['String']>;
}>;

export type UpdateThemeMutation = {
  __typename?: 'Mutation';
  updateTheme?: { __typename?: 'UpdateThemePayload'; id: number } | null;
};

export type ThemeQueryVariables = Exact<{
  themeId: Scalars['Int'];
}>;

export type ThemeQuery = {
  __typename?: 'Query';
  theme?: {
    __typename?: 'Theme';
    id: string;
    name: string;
    description?: string | null;
  } | null;
};

export type ThemesQueryVariables = Exact<{ [key: string]: never }>;

export type ThemesQuery = {
  __typename?: 'Query';
  themes: Array<{
    __typename?: 'Theme';
    id: string;
    name: string;
    description?: string | null;
  }>;
  profile: { __typename?: 'Profile'; dispName: string; email: string };
};

export const ChoiceFragmentDoc = gql`
  fragment Choice on Choice {
    id
    name
    url
    description
    evaluation
    themeId
  }
`;
export const AddChoiceDocument = gql`
  mutation addChoice(
    $name: String!
    $url: String
    $description: String
    $evaluation: Int
    $themeId: Int!
  ) {
    addChoice(
      input: {
        name: $name
        url: $url
        description: $description
        evaluation: $evaluation
        themeId: $themeId
      }
    ) {
      choice {
        ...Choice
      }
    }
  }
  ${ChoiceFragmentDoc}
`;
export type AddChoiceMutationFn = Apollo.MutationFunction<
  AddChoiceMutation,
  AddChoiceMutationVariables
>;

/**
 * __useAddChoiceMutation__
 *
 * To run a mutation, you first call `useAddChoiceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddChoiceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addChoiceMutation, { data, loading, error }] = useAddChoiceMutation({
 *   variables: {
 *      name: // value for 'name'
 *      url: // value for 'url'
 *      description: // value for 'description'
 *      evaluation: // value for 'evaluation'
 *      themeId: // value for 'themeId'
 *   },
 * });
 */
export function useAddChoiceMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddChoiceMutation,
    AddChoiceMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<AddChoiceMutation, AddChoiceMutationVariables>(
    AddChoiceDocument,
    options,
  );
}
export type AddChoiceMutationHookResult = ReturnType<
  typeof useAddChoiceMutation
>;
export type AddChoiceMutationResult = Apollo.MutationResult<AddChoiceMutation>;
export type AddChoiceMutationOptions = Apollo.BaseMutationOptions<
  AddChoiceMutation,
  AddChoiceMutationVariables
>;
export const UpdateChoiceDocument = gql`
  mutation updateChoice(
    $id: Int!
    $name: String!
    $url: String
    $description: String
    $evaluation: Int
  ) {
    updateChoice(
      input: {
        id: $id
        name: $name
        url: $url
        description: $description
        evaluation: $evaluation
      }
    ) {
      choice {
        ...Choice
      }
    }
  }
  ${ChoiceFragmentDoc}
`;
export type UpdateChoiceMutationFn = Apollo.MutationFunction<
  UpdateChoiceMutation,
  UpdateChoiceMutationVariables
>;

/**
 * __useUpdateChoiceMutation__
 *
 * To run a mutation, you first call `useUpdateChoiceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateChoiceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateChoiceMutation, { data, loading, error }] = useUpdateChoiceMutation({
 *   variables: {
 *      id: // value for 'id'
 *      name: // value for 'name'
 *      url: // value for 'url'
 *      description: // value for 'description'
 *      evaluation: // value for 'evaluation'
 *   },
 * });
 */
export function useUpdateChoiceMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateChoiceMutation,
    UpdateChoiceMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    UpdateChoiceMutation,
    UpdateChoiceMutationVariables
  >(UpdateChoiceDocument, options);
}
export type UpdateChoiceMutationHookResult = ReturnType<
  typeof useUpdateChoiceMutation
>;
export type UpdateChoiceMutationResult =
  Apollo.MutationResult<UpdateChoiceMutation>;
export type UpdateChoiceMutationOptions = Apollo.BaseMutationOptions<
  UpdateChoiceMutation,
  UpdateChoiceMutationVariables
>;
export const PickEkzDocument = gql`
  query pickEkz($themeId: Int!, $prePickedChoiceId: Int) {
    ekz(themeId: $themeId, prePickedChoiceId: $prePickedChoiceId) {
      ...Choice
    }
  }
  ${ChoiceFragmentDoc}
`;

/**
 * __usePickEkzQuery__
 *
 * To run a query within a React component, call `usePickEkzQuery` and pass it any options that fit your needs.
 * When your component renders, `usePickEkzQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePickEkzQuery({
 *   variables: {
 *      themeId: // value for 'themeId'
 *      prePickedChoiceId: // value for 'prePickedChoiceId'
 *   },
 * });
 */
export function usePickEkzQuery(
  baseOptions: Apollo.QueryHookOptions<PickEkzQuery, PickEkzQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<PickEkzQuery, PickEkzQueryVariables>(
    PickEkzDocument,
    options,
  );
}
export function usePickEkzLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    PickEkzQuery,
    PickEkzQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<PickEkzQuery, PickEkzQueryVariables>(
    PickEkzDocument,
    options,
  );
}
export type PickEkzQueryHookResult = ReturnType<typeof usePickEkzQuery>;
export type PickEkzLazyQueryHookResult = ReturnType<typeof usePickEkzLazyQuery>;
export type PickEkzQueryResult = Apollo.QueryResult<
  PickEkzQuery,
  PickEkzQueryVariables
>;
export const AddThemeDocument = gql`
  mutation addTheme($name: String!, $description: String) {
    addTheme(input: { name: $name, description: $description }) {
      id
    }
  }
`;
export type AddThemeMutationFn = Apollo.MutationFunction<
  AddThemeMutation,
  AddThemeMutationVariables
>;

/**
 * __useAddThemeMutation__
 *
 * To run a mutation, you first call `useAddThemeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddThemeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addThemeMutation, { data, loading, error }] = useAddThemeMutation({
 *   variables: {
 *      name: // value for 'name'
 *      description: // value for 'description'
 *   },
 * });
 */
export function useAddThemeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddThemeMutation,
    AddThemeMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<AddThemeMutation, AddThemeMutationVariables>(
    AddThemeDocument,
    options,
  );
}
export type AddThemeMutationHookResult = ReturnType<typeof useAddThemeMutation>;
export type AddThemeMutationResult = Apollo.MutationResult<AddThemeMutation>;
export type AddThemeMutationOptions = Apollo.BaseMutationOptions<
  AddThemeMutation,
  AddThemeMutationVariables
>;
export const RemoveThemeDocument = gql`
  mutation removeTheme($id: Int!) {
    removeTheme(input: { id: $id }) {
      id
    }
  }
`;
export type RemoveThemeMutationFn = Apollo.MutationFunction<
  RemoveThemeMutation,
  RemoveThemeMutationVariables
>;

/**
 * __useRemoveThemeMutation__
 *
 * To run a mutation, you first call `useRemoveThemeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveThemeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeThemeMutation, { data, loading, error }] = useRemoveThemeMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRemoveThemeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    RemoveThemeMutation,
    RemoveThemeMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<RemoveThemeMutation, RemoveThemeMutationVariables>(
    RemoveThemeDocument,
    options,
  );
}
export type RemoveThemeMutationHookResult = ReturnType<
  typeof useRemoveThemeMutation
>;
export type RemoveThemeMutationResult =
  Apollo.MutationResult<RemoveThemeMutation>;
export type RemoveThemeMutationOptions = Apollo.BaseMutationOptions<
  RemoveThemeMutation,
  RemoveThemeMutationVariables
>;
export const UpdateThemeDocument = gql`
  mutation updateTheme($id: Int!, $name: String!, $description: String) {
    updateTheme(input: { id: $id, name: $name, description: $description }) {
      id
    }
  }
`;
export type UpdateThemeMutationFn = Apollo.MutationFunction<
  UpdateThemeMutation,
  UpdateThemeMutationVariables
>;

/**
 * __useUpdateThemeMutation__
 *
 * To run a mutation, you first call `useUpdateThemeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateThemeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateThemeMutation, { data, loading, error }] = useUpdateThemeMutation({
 *   variables: {
 *      id: // value for 'id'
 *      name: // value for 'name'
 *      description: // value for 'description'
 *   },
 * });
 */
export function useUpdateThemeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateThemeMutation,
    UpdateThemeMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<UpdateThemeMutation, UpdateThemeMutationVariables>(
    UpdateThemeDocument,
    options,
  );
}
export type UpdateThemeMutationHookResult = ReturnType<
  typeof useUpdateThemeMutation
>;
export type UpdateThemeMutationResult =
  Apollo.MutationResult<UpdateThemeMutation>;
export type UpdateThemeMutationOptions = Apollo.BaseMutationOptions<
  UpdateThemeMutation,
  UpdateThemeMutationVariables
>;
export const ThemeDocument = gql`
  query theme($themeId: Int!) {
    theme(themeId: $themeId) {
      id
      name
      description
    }
  }
`;

/**
 * __useThemeQuery__
 *
 * To run a query within a React component, call `useThemeQuery` and pass it any options that fit your needs.
 * When your component renders, `useThemeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useThemeQuery({
 *   variables: {
 *      themeId: // value for 'themeId'
 *   },
 * });
 */
export function useThemeQuery(
  baseOptions: Apollo.QueryHookOptions<ThemeQuery, ThemeQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<ThemeQuery, ThemeQueryVariables>(
    ThemeDocument,
    options,
  );
}
export function useThemeLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<ThemeQuery, ThemeQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<ThemeQuery, ThemeQueryVariables>(
    ThemeDocument,
    options,
  );
}
export type ThemeQueryHookResult = ReturnType<typeof useThemeQuery>;
export type ThemeLazyQueryHookResult = ReturnType<typeof useThemeLazyQuery>;
export type ThemeQueryResult = Apollo.QueryResult<
  ThemeQuery,
  ThemeQueryVariables
>;
export const ThemesDocument = gql`
  query themes {
    themes {
      id
      name
      description
    }
    profile {
      dispName
      email
    }
  }
`;

/**
 * __useThemesQuery__
 *
 * To run a query within a React component, call `useThemesQuery` and pass it any options that fit your needs.
 * When your component renders, `useThemesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useThemesQuery({
 *   variables: {
 *   },
 * });
 */
export function useThemesQuery(
  baseOptions?: Apollo.QueryHookOptions<ThemesQuery, ThemesQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<ThemesQuery, ThemesQueryVariables>(
    ThemesDocument,
    options,
  );
}
export function useThemesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<ThemesQuery, ThemesQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<ThemesQuery, ThemesQueryVariables>(
    ThemesDocument,
    options,
  );
}
export type ThemesQueryHookResult = ReturnType<typeof useThemesQuery>;
export type ThemesLazyQueryHookResult = ReturnType<typeof useThemesLazyQuery>;
export type ThemesQueryResult = Apollo.QueryResult<
  ThemesQuery,
  ThemesQueryVariables
>;
