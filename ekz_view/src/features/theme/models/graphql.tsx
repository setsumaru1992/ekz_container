import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated input type of CreateTag */
export type CreateTagInput = {
  choiceId: Scalars['Int'];
  name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateTag */
export type CreateTagPayload = {
  __typename?: 'CreateTagPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of DeleteTag */
export type DeleteTagInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteTag */
export type DeleteTagPayload = {
  __typename?: 'DeleteTagPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createTag?: Maybe<CreateTagPayload>;
  deleteTag?: Maybe<DeleteTagPayload>;
};


export type MutationCreateTagArgs = {
  input: CreateTagInput;
};


export type MutationDeleteTagArgs = {
  input: DeleteTagInput;
};

export type Profile = {
  __typename?: 'Profile';
  dispName: Scalars['String'];
  email: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  profile: Profile;
  tags: Array<Tag>;
  themes: Array<Theme>;
};


export type QueryProfileArgs = {
  accessKey: Scalars['String'];
};


export type QueryTagsArgs = {
  choiceId: Scalars['Int'];
};


export type QueryThemesArgs = {
  accessKey: Scalars['String'];
};

export type Tag = {
  __typename?: 'Tag';
  choiceId: Scalars['Int'];
  id: Scalars['Int'];
  name: Scalars['String'];
};

export type Theme = {
  __typename?: 'Theme';
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type ThemesQueryVariables = {
  accessKey: Scalars['String'];
};


export type ThemesQuery = (
  { __typename?: 'Query' }
  & { themes: Array<(
    { __typename?: 'Theme' }
    & Pick<Theme, 'id' | 'name' | 'description'>
  )>, profile: (
    { __typename?: 'Profile' }
    & Pick<Profile, 'dispName' | 'email'>
  ) }
);


export const ThemesDocument = gql`
    query themes($accessKey: String!) {
  themes(accessKey: $accessKey) {
    id
    name
    description
  }
  profile(accessKey: $accessKey) {
    dispName
    email
  }
}
    `;

/**
 * __useThemesQuery__
 *
 * To run a query within a React component, call `useThemesQuery` and pass it any options that fit your needs.
 * When your component renders, `useThemesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useThemesQuery({
 *   variables: {
 *      accessKey: // value for 'accessKey'
 *   },
 * });
 */
export function useThemesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ThemesQuery, ThemesQueryVariables>) {
        return ApolloReactHooks.useQuery<ThemesQuery, ThemesQueryVariables>(ThemesDocument, baseOptions);
      }
export function useThemesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ThemesQuery, ThemesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ThemesQuery, ThemesQueryVariables>(ThemesDocument, baseOptions);
        }
export type ThemesQueryHookResult = ReturnType<typeof useThemesQuery>;
export type ThemesLazyQueryHookResult = ReturnType<typeof useThemesLazyQuery>;
export type ThemesQueryResult = ApolloReactCommon.QueryResult<ThemesQuery, ThemesQueryVariables>;