import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated input type of CreateTag */
export type CreateTagInput = {
  choiceId: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Autogenerated return type of CreateTag */
export type CreateTagPayload = {
  __typename?: 'CreateTagPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of CreateTheme */
export type CreateThemeInput = {
  accessKey: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Autogenerated return type of CreateTheme */
export type CreateThemePayload = {
  __typename?: 'CreateThemePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** Autogenerated input type of DeleteTag */
export type DeleteTagInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** Autogenerated return type of DeleteTag */
export type DeleteTagPayload = {
  __typename?: 'DeleteTagPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of DeleteTheme */
export type DeleteThemeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** Autogenerated return type of DeleteTheme */
export type DeleteThemePayload = {
  __typename?: 'DeleteThemePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addTheme?: Maybe<CreateThemePayload>;
  createTag?: Maybe<CreateTagPayload>;
  deleteTag?: Maybe<DeleteTagPayload>;
  deleteTheme?: Maybe<DeleteThemePayload>;
  updateTheme?: Maybe<UpdateThemePayload>;
};


export type MutationAddThemeArgs = {
  input: CreateThemeInput;
};


export type MutationCreateTagArgs = {
  input: CreateTagInput;
};


export type MutationDeleteTagArgs = {
  input: DeleteTagInput;
};


export type MutationDeleteThemeArgs = {
  input: DeleteThemeInput;
};


export type MutationUpdateThemeArgs = {
  input: UpdateThemeInput;
};

export type Profile = {
  __typename?: 'Profile';
  dispName: Scalars['String'];
  email: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  profile: Profile;
  tags: Array<Tag>;
  themes: Array<Theme>;
};


export type QueryProfileArgs = {
  accessKey: Scalars['String'];
};


export type QueryTagsArgs = {
  choiceId: Scalars['Int'];
};


export type QueryThemesArgs = {
  accessKey: Scalars['String'];
};

export type Tag = {
  __typename?: 'Tag';
  choiceId: Scalars['Int'];
  id: Scalars['Int'];
  name: Scalars['String'];
};

export type Theme = {
  __typename?: 'Theme';
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
};

/** Autogenerated input type of UpdateTheme */
export type UpdateThemeInput = {
  accessKey: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  id: Scalars['Int'];
  name: Scalars['String'];
};

/** Autogenerated return type of UpdateTheme */
export type UpdateThemePayload = {
  __typename?: 'UpdateThemePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type AddThemeMutationVariables = Exact<{
  accessKey: Scalars['String'];
  name: Scalars['String'];
}>;


export type AddThemeMutation = { __typename?: 'Mutation', addTheme?: { __typename?: 'CreateThemePayload', id: number } | null };

export type ThemesQueryVariables = Exact<{
  accessKey: Scalars['String'];
}>;


export type ThemesQuery = { __typename?: 'Query', themes: Array<{ __typename?: 'Theme', id: string, name: string, description?: string | null }>, profile: { __typename?: 'Profile', dispName: string, email: string } };


export const AddThemeDocument = gql`
    mutation addTheme($accessKey: String!, $name: String!) {
  addTheme(input: {accessKey: $accessKey, name: $name}) {
    id
  }
}
    `;
export type AddThemeMutationFn = Apollo.MutationFunction<AddThemeMutation, AddThemeMutationVariables>;

/**
 * __useAddThemeMutation__
 *
 * To run a mutation, you first call `useAddThemeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddThemeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addThemeMutation, { data, loading, error }] = useAddThemeMutation({
 *   variables: {
 *      accessKey: // value for 'accessKey'
 *      name: // value for 'name'
 *   },
 * });
 */
export function useAddThemeMutation(baseOptions?: Apollo.MutationHookOptions<AddThemeMutation, AddThemeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AddThemeMutation, AddThemeMutationVariables>(AddThemeDocument, options);
      }
export type AddThemeMutationHookResult = ReturnType<typeof useAddThemeMutation>;
export type AddThemeMutationResult = Apollo.MutationResult<AddThemeMutation>;
export type AddThemeMutationOptions = Apollo.BaseMutationOptions<AddThemeMutation, AddThemeMutationVariables>;
export const ThemesDocument = gql`
    query themes($accessKey: String!) {
  themes(accessKey: $accessKey) {
    id
    name
    description
  }
  profile(accessKey: $accessKey) {
    dispName
    email
  }
}
    `;

/**
 * __useThemesQuery__
 *
 * To run a query within a React component, call `useThemesQuery` and pass it any options that fit your needs.
 * When your component renders, `useThemesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useThemesQuery({
 *   variables: {
 *      accessKey: // value for 'accessKey'
 *   },
 * });
 */
export function useThemesQuery(baseOptions: Apollo.QueryHookOptions<ThemesQuery, ThemesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ThemesQuery, ThemesQueryVariables>(ThemesDocument, options);
      }
export function useThemesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ThemesQuery, ThemesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ThemesQuery, ThemesQueryVariables>(ThemesDocument, options);
        }
export type ThemesQueryHookResult = ReturnType<typeof useThemesQuery>;
export type ThemesLazyQueryHookResult = ReturnType<typeof useThemesLazyQuery>;
export type ThemesQueryResult = Apollo.QueryResult<ThemesQuery, ThemesQueryVariables>;