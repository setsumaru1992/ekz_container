import gql from 'graphql-tag';
import * as React from 'react';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactComponents from '@apollo/react-components';
import * as ApolloReactHoc from '@apollo/react-hoc';
export type Maybe<T> = T | null;
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated input type of CreateTag */
export type CreateTagInput = {
  choiceId: Scalars['Int'];
  name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateTag */
export type CreateTagPayload = {
  __typename?: 'CreateTagPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of DeleteTag */
export type DeleteTagInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteTag */
export type DeleteTagPayload = {
  __typename?: 'DeleteTagPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createTag?: Maybe<CreateTagPayload>;
  deleteTag?: Maybe<DeleteTagPayload>;
};


export type MutationCreateTagArgs = {
  input: CreateTagInput;
};


export type MutationDeleteTagArgs = {
  input: DeleteTagInput;
};

export type Profile = {
  __typename?: 'Profile';
  dispName: Scalars['String'];
  email: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  profile: Profile;
  tags: Array<Tag>;
  themes: Array<Theme>;
};


export type QueryProfileArgs = {
  accessKey: Scalars['String'];
};


export type QueryTagsArgs = {
  choiceId: Scalars['Int'];
};


export type QueryThemesArgs = {
  accessKey: Scalars['String'];
};

export type Tag = {
  __typename?: 'Tag';
  choiceId: Scalars['Int'];
  id: Scalars['Int'];
  name: Scalars['String'];
};

export type Theme = {
  __typename?: 'Theme';
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type HogehogeQueryVariables = {
  accessKey: Scalars['String'];
};


export type HogehogeQuery = (
  { __typename?: 'Query' }
  & { themes: Array<(
    { __typename?: 'Theme' }
    & Pick<Theme, 'id' | 'name' | 'description'>
  )>, profile: (
    { __typename?: 'Profile' }
    & Pick<Profile, 'dispName' | 'email'>
  ) }
);


export const HogehogeDocument = gql`
    query hogehoge($accessKey: String!) {
  themes(accessKey: $accessKey) {
    id
    name
    description
  }
  profile(accessKey: $accessKey) {
    dispName
    email
  }
}
    `;
export type HogehogeComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<HogehogeQuery, HogehogeQueryVariables>, 'query'> & ({ variables: HogehogeQueryVariables; skip?: boolean; } | { skip: boolean; });

    export const HogehogeComponent = (props: HogehogeComponentProps) => (
      <ApolloReactComponents.Query<HogehogeQuery, HogehogeQueryVariables> query={HogehogeDocument} {...props} />
    );
    
export type HogehogeProps<TChildProps = {}, TDataName extends string = 'data'> = {
      [key in TDataName]: ApolloReactHoc.DataValue<HogehogeQuery, HogehogeQueryVariables>
    } & TChildProps;
export function withHogehoge<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<
  TProps,
  HogehogeQuery,
  HogehogeQueryVariables,
  HogehogeProps<TChildProps, TDataName>>) {
    return ApolloReactHoc.withQuery<TProps, HogehogeQuery, HogehogeQueryVariables, HogehogeProps<TChildProps, TDataName>>(HogehogeDocument, {
      alias: 'hogehoge',
      ...operationOptions
    });
};
export type HogehogeQueryResult = ApolloReactCommon.QueryResult<HogehogeQuery, HogehogeQueryVariables>;